name: Generate Shorts (RunPod + Remotion)

on:
  workflow_dispatch:
    inputs:
      topic:
        description: موضوع/فكرة الفيديو (يُستخدم لصياغة لقطات)
        required: true
        default: "Stealth-flow identity for anxious beginners"
      shots:
        description: عدد اللقطات (صور)
        required: true
        default: "6"
      seconds_per_shot:
        description: مدة كل لقطة بالثواني
        required: true
        default: "1.2"
      fps:
        description: Frames per second
        required: true
        default: "30"
      audio_url:
        description: رابط ملف صوت (اختياري) mp3/wav لدمجه
        required: false
        default: ""

jobs:
  make_video:
    runs-on: ubuntu-latest
    env:
      RUNPOD_ENDPOINT_ID: ${{ secrets.RUNPOD_ENDPOINT_ID }}
      RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Install tools (Python deps and ffmpeg)
        run: |
          python -m pip install --upgrade pip
          pip install requests moviepy imageio-ffmpeg
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Prepare folders
        run: |
          mkdir -p outputs/gha_short_work tmp
          rm -f tmp/files.txt tmp/metadata.json

      - name: Build scene prompts
        id: scenes
        shell: bash
        env:
          INPUT_TOPIC: ${{ github.event.inputs.topic }}
        run: |
          cat > tmp/scenes.txt <<'TXT'
          ${INPUT_TOPIC} — tunnel, moody teal light, lone athlete silhouette, cinematic, clean composition
          ${INPUT_TOPIC} — close-up shoes hitting wet ground, motion blur, neon reflections
          ${INPUT_TOPIC} — side profile sprint start, tense muscles, dramatic rim light
          ${INPUT_TOPIC} — wide angle alley with fog, cyan/purple accents, dynamic composition
          ${INPUT_TOPIC} — finish line vibe, particles, high contrast, energetic lighting
          ${INPUT_TOPIC} — hero pose, brand glow, volumetric light, editorial look
          TXT
          head -n "${{ github.event.inputs.shots }}" tmp/scenes.txt > tmp/scenes.use

      - name: Generate images on RunPod (ComfyUI)
        run: |
          i=0
          while IFS= read -r prompt; do
            i=$((i+1))
            printf -v num "%02d" "$i"
            python tools/comfy_runsync_save_image.py \
              --workflow tools/workflows/flux1_text2img.json \
              --prompt "$prompt" \
              --out "outputs/gha_short_work/scene_${num}.png"
          done < tmp/scenes.use

      - name: Validate generated images
        run: |
          echo "Listing outputs/gha_short_work:"
          ls -la outputs/gha_short_work || (echo "No images" && exit 1)
          count=$(ls outputs/gha_short_work/scene_*.png 2>/dev/null | wc -l || true)
          if [ -z "$count" ] || [ "$count" -eq 0 ]; then
            echo "❌ No images generated."
            exit 1
          fi
          echo "✅ Found $count images."

      - name: (Optional) Download audio URL if provided
        if: ${{ github.event.inputs.audio_url != '' }}
        run: |
          echo "Downloading audio from: ${{ github.event.inputs.audio_url }}"
          mkdir -p tmp
          curl -L "${{ github.event.inputs.audio_url }}" -o tmp/audio_in || (echo "❌ Failed to download audio" && exit 1)
          file tmp/audio_in || true
          echo "✅ audio saved to tmp/audio_in"

      - name: Prepare remotion metadata
        run: |
          mkdir -p tmp
          python3 - <<'PY'
import json, glob, sys
topic = "${{ github.event.inputs.topic }}"
seconds = float("${{ github.event.inputs.seconds_per_shot }}")
fps = int("${{ github.event.inputs.fps }}")

imgs = sorted(glob.glob("outputs/gha_short_work/scene_*.png"))
images_for_remotion = ["../" + p.replace("\\\\", "/") for p in imgs]

data = {
  "title": f"Sport Sync — {topic}",
  "subtitle": "Discover your sport identity",
  "seconds": seconds,
  "fps": fps,
  "images": images_for_remotion
}

with open("tmp/metadata.json", "w", encoding="utf-8") as f:
    json.dump(data, f, ensure_ascii=False, indent=2)

print(open("tmp/metadata.json", encoding="utf-8").read())
PY

      - name: Debug metadata
        run: |
          echo "=== tmp/metadata.json contents ==="
          cat tmp/metadata.json || true

      - name: Install Node & Remotion dependencies
        run: |
          curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          cd remotion
          npm ci

      - name: Render Remotion video
        run: |
          cd remotion
          npx remotion render src/VideoRoot.jsx ../outputs/gha_short_work/video_from_remotion.mp4 --props "$(cat ../tmp/metadata.json)"

      - name: Post-render check & re-encode (optional)
        run: |
          ls -la outputs/gha_short_work/ || true
          if [ -f outputs/gha_short_work/video_from_remotion.mp4 ]; then
            echo "Video created, re-encoding for final quality..."
            ffmpeg -y -i outputs/gha_short_work/video_from_remotion.mp4 -c:v libx264 -preset slow -crf 18 -c:a aac -b:a 192k outputs/gha_short_work/video_from_remotion_final.mp4
          else
            echo "❌ Remotion did not produce video"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: remotion_video
          path: |
            outputs/gha_short_work/video_from_remotion_final.mp4
            outputs/gha_short_work/scene_*.png
