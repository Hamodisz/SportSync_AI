name: Generate Shorts (RunPod + FFmpeg -> Python pipeline)

on:
  workflow_dispatch:
    inputs:
      topic:
        description: موضوع/فكرة الفيديو (يُستخدم لصياغة لقطات)
        required: true
        default: "Stealth-flow identity for anxious beginners"
      shots:
        description: عدد اللقطات (صور)
        required: true
        default: "6"
      seconds_per_shot:
        description: مدة كل لقطة بالثواني
        required: true
        default: "1.2"
      fps:
        description: Frames per second
        required: true
        default: "30"
      audio_url:
        description: رابط ملف صوت (اختياري) mp3/wav لدمجه
        required: false
        default: ""

jobs:
  make_video:
    runs-on: ubuntu-latest
    env:
      RUNPOD_ENDPOINT_ID: ${{ secrets.RUNPOD_ENDPOINT_ID }}
      RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install requests moviepy imageio-ffmpeg
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Prepare folders
        run: |
          mkdir -p outputs/gha_short_work tmp
          rm -f tmp/files.txt

      - name: Build scene prompts
        id: scenes
        shell: bash
        env:
          INPUT_TOPIC: ${{ github.event.inputs.topic }}
        run: |
          cat > tmp/scenes.txt <<'TXT'
          ${INPUT_TOPIC} — tunnel, moody teal light, lone athlete silhouette, cinematic, clean composition
          ${INPUT_TOPIC} — close-up shoes hitting wet ground, motion blur, neon reflections
          ${INPUT_TOPIC} — side profile sprint start, tense muscles, dramatic rim light
          ${INPUT_TOPIC} — wide angle alley with fog, cyan/purple accents, dynamic composition
          ${INPUT_TOPIC} — finish line vibe, particles, high contrast, energetic lighting
          ${INPUT_TOPIC} — hero pose, brand glow, volumetric light, editorial look
          TXT
          head -n "${{ github.event.inputs.shots }}" tmp/scenes.txt > tmp/scenes.use

      - name: Generate images on RunPod (ComfyUI)
        run: |
          i=0
          while IFS= read -r prompt; do
            i=$((i+1))
            printf -v num "%02d" "$i"
            python tools/comfy_runsync_save_image.py \
              --workflow tools/workflows/flux1_text2img.json \
              --prompt "$prompt" \
              --out "outputs/gha_short_work/scene_${num}.png"
          done < tmp/scenes.use

      - name: ✅ Validate generated images
        run: |
          echo "Checking output images..."
          ls -la outputs/gha_short_work/ || (echo "❌ outputs/gha_short_work not found" && exit 1)
          count=$(ls outputs/gha_short_work/scene_*.png 2>/dev/null | wc -l || true)
          if [ -z "$count" ] || [ "$count" -eq 0 ]; then
            echo "❌ No scene_*.png images found in outputs/gha_short_work"
            exit 1
          fi
          echo "✅ Found $count image(s)."

      - name: (Optional) Download audio URL if provided
        if: ${{ github.event.inputs.audio_url != '' }}
        run: |
          echo "Downloading audio from: ${{ github.event.inputs.audio_url }}"
          mkdir -p tmp
          curl -L "${{ github.event.inputs.audio_url }}" -o tmp/audio_in || (echo "❌ Failed to download audio" && exit 1)
          file tmp/audio_in || true
          echo "✅ audio saved to tmp/audio_in"

      - name: 🔍 Debug tmp directory + contents
        run: |
          echo "🔍 Listing tmp/ directory:"
          ls -la tmp/ || true
          
          echo "📁 Listing output images:"
          ls -la outputs/gha_short_work/ | head -n 50 || true

      - name: 🎥 Render vertical video (via Python pipeline) - safe mode
        run: |
          # build base command
          CMD="python3 logic/video_pipeline.py \
            --images outputs/gha_short_work \
            --out outputs/gha_short_work/short.mp4 \
            --seconds \"${{ github.event.inputs.seconds_per_shot }}\" \
            --fps ${{ github.event.inputs.fps }}"

          # attach audio if exists
          if [ -f tmp/audio_in ]; then
            echo "🔊 Found audio: tmp/audio_in — attaching to command"
            CMD="$CMD --audio tmp/audio_in"
          else
            echo "🔈 No audio file found, rendering without audio"
          fi

          echo "Running: $CMD"
          eval $CMD

      - name: 🧪 Post-render check
        run: |
          echo "Checking output video:"
          ls -la outputs/gha_short_work/short.mp4 || (echo "❌ short.mp4 not found" && exit 1)
          echo "Output video info:"
          ffprobe -v error -show_format -show_streams outputs/gha_short_work/short.mp4 || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: short_video
          path: |
            outputs/gha_short_work/short.mp4
            outputs/gha_short_work/scene_*.png
