# agents/marketing/video_pipeline/orchestrator.py
import json, logging, subprocess, shlex, sys, os
from pathlib import Path

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# -------- Repo root detection --------
_here = Path(__file__).resolve()
ROOT = None
for pr in _here.parents:
    if (pr / ".git").exists() or (pr / "data").exists():
        ROOT = pr; break
if ROOT is None:
    ROOT = _here.parents[3]

# ensure repo root on sys.path
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

# -------- Paths --------
INSIGHTS_PATH   = ROOT / "data" / "insights_log.json"
ASSETS_ROOT     = ROOT / "content_studio" / "assets"           # مواد العملاء
AI_IMG_DIR      = ROOT / "content_studio" / "ai_images" / "outputs"
VOICE_SCRIPT    = ROOT / "content_studio" / "ai_voice" / "voice_generator.py"
VIDEO_COMPOSER  = ROOT / "content_studio" / "ai_video" / "generate_final_video.py"
FINAL_VIDEO_OUT = ROOT / "content_studio" / "ai_video" / "final_video.mp4"
TMP_DIR         = ROOT / "tmp"

def run_cmd(cmd, cwd=None, env=None):
    logging.info("Running: %s", cmd)
    p = subprocess.Popen(cmd, shell=True, cwd=cwd, env=env,
                         stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
    for line in p.stdout: print(line, end="")
    p.wait()
    if p.returncode != 0:
        raise RuntimeError(f"Command failed ({p.returncode}): {cmd}")
    return p.returncode

def try_import(module_name, attr=None):
    try:
        mod = __import__(module_name, fromlist=['*'])
        return getattr(mod, attr) if attr else mod
    except Exception as e:
        logging.warning("Could not import %s: %s", module_name, e)
        return None

def load_insight(index=0):
    if not INSIGHTS_PATH.exists():
        TMP_DIR.mkdir(parents=True, exist_ok=True)
        sample = [{
            "id": "sample_0001",
            "topic": "Sample topic: Stealth-flow identity",
            "recommendation": "Pilates / Yoga flow",
            "notes": "Autogenerated sample (insights_log.json missing).",
            "seconds_per_image": 1.2
        }]
        (TMP_DIR / "example_insights_log.json").write_text(
            json.dumps(sample, ensure_ascii=False, indent=2), encoding="utf-8")
        raise FileNotFoundError(f"Insights missing at {INSIGHTS_PATH}. Sample written to tmp/example_insights_log.json")
    data = json.loads(INSIGHTS_PATH.read_text(encoding="utf-8"))
    if not isinstance(data, list): raise RuntimeError("insights_log.json must be a list")
    if index < 0 or index >= len(data): raise IndexError(f"Index {index} out of range (len={len(data)})")
    return data[index]

# ----------------- NEW: مصادر مواد العملاء -----------------
def _first_existing(*paths: Path) -> Path | None:
    for p in paths:
        if p and p.exists(): return p
    return None

def discover_client_dir() -> Path | None:
    """يرجع أول مجلد عميل فيه صور/فيديو أو config.json"""
    if not ASSETS_ROOT.exists(): return None
    # افضّل مجلد فيه config.json، وإلا أي مجلد فيه صور/فيديو
    candidates = sorted([d for d in ASSETS_ROOT.glob("*") if d.is_dir()])
    for d in candidates:
        if (d / "config.json").exists(): return d
    for d in candidates:
        if any((d / "images").glob("*")) or any((d / "video").glob("*")):
            return d
    return None

def build_images_from_assets(client_dir: Path, seconds_default: float = 1.2) -> tuple[list[str], float]:
    """
    يرجّع (images_rel, seconds_per_image)
    - لو فيه config.json ويحدد shots: يلتزم بها (type=image فقط).
    - لو ما فيه: يأخذ كل الصور داخل images/ بالترتيب.
    """
    seconds = seconds_default
    images_abs: list[Path] = []

    cfg = _first_existing(client_dir / "config.json")
    if cfg:
        try:
            meta = json.loads(cfg.read_text(encoding="utf-8"))
            seconds = float(meta.get("canvas", {}).get("seconds", meta.get("seconds", seconds_default)))
            shots = meta.get("shots", [])
            for s in shots:
                if isinstance(s, dict) and s.get("type") == "image":
                    p = client_dir / s.get("src", "")
                    if p.exists(): images_abs.append(p)
        except Exception as e:
            logging.warning("Failed to parse %s: %s (fallback to folder scan)", cfg, e)

    if not images_abs:
        img_dir = client_dir / "images"
        images_abs = sorted([p for p in img_dir.glob("*") if p.suffix.lower() in (".png",".jpg",".jpeg",".webp")])

    images_rel = []
    for p in images_abs:
        try:
            images_rel.append("../" + str(p.relative_to(ROOT)).replace("\\","/"))
        except ValueError:
            images_rel.append("../" + str(p).replace("\\","/"))

    return images_rel, seconds
# ----------------------------------------------------------

# --- RunPod images generation (ComfyUI) — يُستخدم فقط عند عدم توفر مواد عملاء ولا صور مولدة ---
def generate_images_via_runpod(prompts, out_dir: Path, workflow_path: Path = None):
    rp_key = os.environ.get("RUNPOD_API_KEY")
    rp_ep  = os.environ.get("RUNPOD_ENDPOINT_ID")
    if not rp_key or not rp_ep:
        logging.warning("RUNPOD credentials not found; skipping cloud gen.")
        return
    if workflow_path is None:
        workflow_path = ROOT / "tools" / "workflows" / "flux1_text2img.json"
    if not workflow_path.exists():
        logging.warning("Workflow JSON not found: %s ; skipping cloud gen.", workflow_path)
        return
    comfy_script = ROOT / "tools" / "comfy_runsync_save_image.py"
    if not comfy_script.exists():
        logging.warning("Comfy runner script not found: %s ; skipping cloud gen.", comfy_script)
        return
    out_dir.mkdir(parents=True, exist_ok=True)
    for i, prompt in enumerate(prompts, start=1):
        num = f"{i:02d}"
        out_img = out_dir / f"scene_{num}.png"
        cmd = (
            f"python {shlex.quote(str(comfy_script))} "
            f"--workflow {shlex.quote(str(workflow_path))} "
            f"--prompt {shlex.quote(prompt)} "
            f"--out {shlex.quote(str(out_img))}"
        )
        run_cmd(cmd, cwd=str(ROOT))

def build_metadata(insight, script, images_rel, seconds, audio_rel=None):
    meta = {
        "title": script.get("hook", ""),
        "subtitle": script.get("cta", ""),
        "seconds": float(seconds),
        "fps": 30,
        "images": images_rel,
        "animation": {"crossfade": 0.25, "colorx": 1.0},
        "narration_text": script.get("insight","")
    }
    if audio_rel: meta["audio"] = audio_rel
    TMP_DIR.mkdir(parents=True, exist_ok=True)
    (TMP_DIR / "metadata.json").write_text(json.dumps(meta, ensure_ascii=False, indent=2), encoding="utf-8")
    logging.info("Wrote metadata to %s", TMP_DIR / "metadata.json")
    return TMP_DIR / "metadata.json"

def generate_script_from_repo(insight):
    m1 = try_import("agents.marketing.video_pipeline.script_writer")
    if m1 and hasattr(m1, "build_script_from_insight"):
        return m1.build_script_from_insight(insight)
    m2 = try_import("content_studio.generate_script.script_generator")
    if m2 and hasattr(m2, "generate"):
        return m2.generate(insight)
    hook = insight.get("recommendation","Discover your sport").split("/")[0]
    insight_text = f"{insight.get('notes','')} — توصية: {insight.get('recommendation','')}"
    cta = "تابعنا لمزيد من التوصيات."
    return {"hook": hook, "insight": insight_text, "cta": cta}

def produce_voice(script_text, out_path: Path):
    vg = try_import("content_studio.ai_voice.voice_generator")
    if vg and hasattr(vg, "generate"):
        try:
            vg.generate(script_text, str(out_path)); return out_path
        except Exception as e:
            logging.warning("voice_generator.generate failed: %s", e)
    if VOICE_SCRIPT.exists():
        cmd = f"python {shlex.quote(str(VOICE_SCRIPT))} --text {shlex.quote(script_text)} --out {shlex.quote(str(out_path))}"
        run_cmd(cmd, cwd=str(ROOT)); return out_path
    try:
        import pyttsx3
        engine = pyttsx3.init()
        engine.save_to_file(script_text, str(out_path))
        engine.runAndWait()
        if out_path.exists(): return out_path
    except Exception as e:
        logging.warning("Local TTS failed: %s", e)
    return None

def render_with_repo_tools(meta_path: Path):
    if VIDEO_COMPOSER.exists():
        cmd = f"python {shlex.quote(str(VIDEO_COMPOSER))} --meta {shlex.quote(str(meta_path))} --out {shlex.quote(str(FINAL_VIDEO_OUT))}"
        run_cmd(cmd, cwd=str(ROOT)); return FINAL_VIDEO_OUT
    raise RuntimeError("No renderer found (expected content_studio/ai_video/generate_final_video.py).")

def main(index=0):
    logging.info("Starting orchestrator (index=%s)", index)
    insight = load_insight(index)
    logging.info("Loaded insight id: %s topic: %s", insight.get("id","?"), insight.get("topic","?"))
    script = generate_script_from_repo(insight)

    # 1) جرّب مواد العملاء أولاً (لا نكسر شغلك السابق)
    client_dir = discover_client_dir()
    images_rel, seconds = ([], float(insight.get("seconds_per_image", 1.2)))
    if client_dir:
        logging.info("Using client assets at: %s", client_dir)
        images_rel, seconds = build_images_from_assets(client_dir, seconds_default=seconds)

    # 2) لو ما فيه أصول عميل صالحة، استخدم السلوك السابق (صور مولدة/جاهزة)
    if not images_rel:
        # موجودة مسبقًا؟
        imgs = sorted(AI_IMG_DIR.glob("scene_*.png"))
        if not imgs:
            # جرّب RunPod فقط عند الحاجة
            prompts = [
                f"{insight.get('topic','Sport Sync')} — tunnel, moody teal light, silhouette, cinematic",
                f"{insight.get('topic','Sport Sync')} — close-up shoes, wet ground, motion blur, neon",
                f"{insight.get('topic','Sport Sync')} — sprint start profile, dramatic rim light",
                f"{insight.get('topic','Sport Sync')} — foggy alley, cyan/purple accents",
                f"{insight.get('topic','Sport Sync')} — finish-line particles, high contrast",
                f"{insight.get('topic','Sport Sync')} — hero pose, volumetric light, editorial"
            ]
            generate_images_via_runpod(prompts, AI_IMG_DIR)
            imgs = sorted(AI_IMG_DIR.glob("scene_*.png"))
            if not imgs:
                raise FileNotFoundError(f"No images found in {AI_IMG_DIR} and no client assets available.")
        images_rel = ["../" + str(p.relative_to(ROOT)).replace("\\","/") for p in imgs]

    # 3) صوت (اختياري)
    audio_out = TMP_DIR / "audio_tts.mp3"
    tts = produce_voice(script.get("insight",""), audio_out)
    audio_rel = "../" + str(audio_out.relative_to(ROOT)).replace("\\","/") if (tts and audio_out.exists()) else None

    meta_path = build_metadata(insight, script, images_rel, seconds, audio_rel=audio_rel)
    out = render_with_repo_tools(meta_path)
    logging.info("Final video produced: %s", out)

if __name__ == "__main__":
    import argparse
    ap = argparse.ArgumentParser()
    ap.add_argument("--index", type=int, default=0)
    args = ap.parse_args()
    main(index=args.index)
