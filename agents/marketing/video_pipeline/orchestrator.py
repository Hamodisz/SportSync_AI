# agents/marketing/video_pipeline/orchestrator.py
import json
import logging
import subprocess
import shlex
from pathlib import Path
import sys

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# -------- Repo root detection (clean) --------
_here = Path(__file__).resolve()
ROOT = None
for pr in _here.parents:
    if (pr / ".git").exists() or (pr / "data").exists():
        ROOT = pr
        break
if ROOT is None:
    ROOT = _here.parents[3]

# ensure repo root on sys.path for internal imports like 'content_studio'
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

INSIGHTS_PATH = ROOT / "data" / "insights_log.json"
IMAGES_DIR = ROOT / "content_studio" / "ai_images" / "outputs"
VOICE_SCRIPT = ROOT / "content_studio" / "ai_voice" / "voice_generator.py"
VIDEO_COMPOSER_SCRIPT = ROOT / "content_studio" / "ai_video" / "generate_final_video.py"
FINAL_VIDEO_OUT = ROOT / "content_studio" / "ai_video" / "final_video.mp4"
TMP_DIR = ROOT / "tmp"

# -------- helpers --------
def run_cmd(cmd, cwd=None, env=None):
    logging.info("Running: %s", cmd)
    proc = subprocess.Popen(cmd, shell=True, cwd=cwd, env=env,
                            stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
    for line in proc.stdout:
        print(line, end="")
    proc.wait()
    if proc.returncode != 0:
        raise RuntimeError(f"Command failed ({proc.returncode}): {cmd}")
    return proc.returncode

def load_insight(index=0):
    if not INSIGHTS_PATH.exists():
        sample = [{
            "id": "sample_0001",
            "topic": "Sample topic: Stealth-flow identity",
            "scores": {"energy": 0.5, "focus": 0.5, "social": 0.5},
            "layer_z": "sample_layer",
            "keywords": ["sample"],
            "recommendation": "Pilates / Yoga flow",
            "notes": "Autogenerated sample since insights_log.json is missing.",
            "seconds_per_image": 1.2
        }]
        TMP_DIR.mkdir(parents=True, exist_ok=True)
        (TMP_DIR / "example_insights_log.json").write_text(
            json.dumps(sample, ensure_ascii=False, indent=2), encoding="utf-8"
        )
        raise FileNotFoundError(
            f"Insights file not found: {INSIGHTS_PATH}. A sample was written to tmp/example_insights_log.json"
        )
    try:
        data = json.loads(INSIGHTS_PATH.read_text(encoding="utf-8"))
    except Exception as e:
        raise RuntimeError(f"Failed to parse JSON {INSIGHTS_PATH}: {e!r}")
    if not isinstance(data, list):
        raise RuntimeError(f"Expected a list/array in {INSIGHTS_PATH}")
    if index < 0 or index >= len(data):
        raise IndexError(f"Index {index} out of range (len={len(data)})")
    return data[index]

def try_import(module_name, attr=None):
    try:
        mod = __import__(module_name, fromlist=['*'])
        return getattr(mod, attr) if attr else mod
    except Exception as e:
        logging.warning("Could not import %s: %s", module_name, e)
        return None

def generate_script_from_repo(insight):
    # prefer your own generators if present; fallback simple
    m1 = try_import("agents.marketing.video_pipeline.script_writer")
    if m1 and hasattr(m1, "build_script_from_insight"):
        return m1.build_script_from_insight(insight)
    m2 = try_import("content_studio.generate_script.script_generator")
    if m2 and hasattr(m2, "generate"):
        return m2.generate(insight)
    # fallback
    hook = insight.get("recommendation", "Discover your sport").split("/")[0]
    insight_text = f"{insight.get('notes','')} — توصية: {insight.get('recommendation','')}"
    cta = "تابعنا لمزيد من التوصيات."
    return {"hook": hook, "insight": insight_text, "cta": cta}

def produce_voice(script_text, out_path: Path):
    vg = try_import("content_studio.ai_voice.voice_generator")
    if vg and hasattr(vg, "generate"):
        try:
            vg.generate(script_text, str(out_path))
            return out_path
        except Exception as e:
            logging.warning("voice_generator.generate failed: %s", e)
    if VOICE_SCRIPT.exists():
        cmd = f"python {shlex.quote(str(VOICE_SCRIPT))} --text {shlex.quote(script_text)} --out {shlex.quote(str(out_path))}"
        run_cmd(cmd, cwd=str(ROOT))
        return out_path
    # fallback pyttsx3
    try:
        import pyttsx3
        engine = pyttsx3.init()
        engine.save_to_file(script_text, str(out_path))
        engine.runAndWait()
        if out_path.exists():
            return out_path
    except Exception as e:
        logging.warning("Local TTS failed: %s", e)
    return None

def build_metadata(insight, script, images_rel, audio_rel=None):
    meta = {
        "title": script.get("hook", ""),
        "subtitle": script.get("cta", ""),
        "seconds": float(insight.get("seconds_per_image", 1.2)),
        "fps": 30,
        "images": images_rel,
        "animation": {"crossfade": 0.25, "colorx": 1.0},
        "narration_text": script.get("insight", "")
    }
    if audio_rel:
        meta["audio"] = audio_rel
    TMP_DIR.mkdir(parents=True, exist_ok=True)
    (TMP_DIR / "metadata.json").write_text(json.dumps(meta, ensure_ascii=False, indent=2), encoding="utf-8")
    logging.info("Wrote metadata to %s", TMP_DIR / "metadata.json")
    return TMP_DIR / "metadata.json"

def render_with_repo_tools(meta_path: Path):
    if VIDEO_COMPOSER_SCRIPT.exists():
        cmd = f"python {shlex.quote(str(VIDEO_COMPOSER_SCRIPT))} --meta {shlex.quote(str(meta_path))} --out {shlex.quote(str(FINAL_VIDEO_OUT))}"
        run_cmd(cmd, cwd=str(ROOT))
        return FINAL_VIDEO_OUT
    raise RuntimeError("No renderer found (expected content_studio/ai_video/generate_final_video.py).")

def main(index=0):
    logging.info("Starting orchestrator (index=%s)", index)
    insight = load_insight(index)
    logging.info("Loaded insight id: %s topic: %s", insight.get("id","?"), insight.get("topic","?"))

    script = generate_script_from_repo(insight)
    logging.info("Script generated: hook=%s", script.get("hook","")[:60])

    images = sorted(IMAGES_DIR.glob("scene_*.png"))
    if not images:
        raise FileNotFoundError(f"No scene images found in {IMAGES_DIR}")
    images_rel = ["../" + str(p.relative_to(ROOT)).replace("\\","/") for p in images]

    # voice (optional)
    audio_out = TMP_DIR / "audio_tts.mp3"
    tts = produce_voice(script.get("insight",""), audio_out)
    audio_rel = "../" + str(audio_out.relative_to(ROOT)).replace("\\","/") if (tts and audio_out.exists()) else None

    meta_path = build_metadata(insight, script, images_rel, audio_rel=audio_rel)
    out = render_with_repo_tools(meta_path)
    logging.info("Final video produced: %s", out)

if __name__ == "__main__":
    import argparse
    ap = argparse.ArgumentParser()
    ap.add_argument("--index", type=int, default=0)
    args = ap.parse_args()
    main(index=args.index)
