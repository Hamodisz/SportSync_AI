name: Generate Client Video

on:
  workflow_dispatch:
    inputs:
      client:
        description: "اسم مجلد العميل داخل content_studio/assets"
        required: true
        default: "demo_client"
      fps:
        description: "Frames per second"
        required: true
        default: "30"
      seconds:
        description: "مدد المشاهد (JSON array) مثل [6,8,7]"
        required: true
        default: "[6,8,7]"
      audio_url:
        description: "رابط ملف mp3/wav (اختياري)"
        required: false
        default: ""
      use_runpod:
        description: "توليد صور عبر RunPod/ComfyUI؟"
        required: false
        default: "false"

jobs:
  build_video:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug listing
        run: |
          echo "CLIENT=${{ github.event.inputs.client }}"
          ls -la
          ls -la content_studio || true
          ls -la content_studio/assets || true
          ls -la content_studio/assets/${{ github.event.inputs.client }} || true
          ls -la content_studio/assets/${{ github.event.inputs.client }}/images || true

      - name: Validate client assets
        env:
          CLIENT: ${{ github.event.inputs.client }}
        run: |
          set -e
          test -f "content_studio/assets/${CLIENT}/config.json"
          echo "✅ Found config for ${CLIENT}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install moviepy pillow pydantic rich

      - name: Build metadata.json from client config
        env:
          CLIENT: ${{ github.event.inputs.client }}
          FPS: ${{ github.event.inputs.fps }}
          SECONDS: ${{ github.event.inputs.seconds }}
        run: |
          python - <<'PY'
          import json,sys
          from pathlib import Path
          client = "${CLIENT}"
          meta_out = Path("tmp/metadata_client.json")
          cfg = json.loads(Path(f"content_studio/assets/{client}/config.json").read_text(encoding="utf-8"))
          secs = json.loads("${SECONDS}")
          imgs = [f"content_studio/assets/{client}/images/{s['image']}" for s in cfg["scenes"]]
          texts = [s["text"] for s in cfg["scenes"]]
          meta = {
            "title": "Sport Sync",
            "subtitle": "Discover your sport identity",
            "fps": int("${FPS}"),
            "images": imgs,
            "seconds": secs,
            "texts": texts,
          }
          meta_out.parent.mkdir(parents=True, exist_ok=True)
          meta_out.write_text(json.dumps(meta, ensure_ascii=False, indent=2), encoding="utf-8")
          print("Wrote", meta_out)
          PY

      - name: (Optional) Generate images via RunPod
        if: ${{ github.event.inputs.use_runpod == 'true' }}
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
          RUNPOD_ENDPOINT_ID: ${{ secrets.RUNPOD_ENDPOINT_ID }}
          CLIENT: ${{ github.event.inputs.client }}
        run: |
          echo "🌥️ Skipping detailed RunPod steps here (requires your endpoint + workflow)."

      - name: Render video (silent)
        run: |
          PYTHONUNBUFFERED=1 python content_studio/ai_video/generate_final_video.py \
            --meta tmp/metadata_client.json \
            --out content_studio/ai_video/final_videos/${{ github.event.inputs.client }}.mp4

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: final_${{ github.event.inputs.client }}
          path: content_studio/ai_video/final_videos/${{ github.event.inputs.client }}.mp4
