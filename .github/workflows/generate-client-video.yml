name: Generate Client Video

on:
  workflow_dispatch:
    inputs:
      client:
        description: "اسم مجلد العميل داخل content_studio/assets (مثال: demo_client)"
        required: true
        default: demo_client
      fps:
        description: "Frames per second"
        required: true
        default: "30"
      seconds:
        description: "مدد اللقطات (JSON Array) مثل [6,8,7] — تُستخدم فقط عند غيابها في config.json"
        required: true
        default: "[6,8,7]"
      audio_url:
        description: "رابط ملف صوت mp3/wav اختياري"
        required: false
        default: ""
      use_runpod:
        description: "توليد الصور عبر RunPod/ComfyUI؟ (true/false)"
        required: false
        default: "false"

jobs:
  build_video:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (use same ref as dispatch)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install moviepy pillow imageio imageio-ffmpeg requests pydantic typing-extensions

      - name: Debug listing
        run: |
          echo "PWD: $(pwd)"
          echo "Branch/Ref: ${{ github.ref }}"
          echo "CLIENT=${{ github.event.inputs.client }}"
          ls -la
          ls -la content_studio || true
          ls -la content_studio/assets || true
          ls -la "content_studio/assets/${{ github.event.inputs.client }}" || true
          ls -la "content_studio/assets/${{ github.event.inputs.client }}/images" || true

      - name: Validate client assets
        env:
          CLIENT: ${{ github.event.inputs.client }}
        run: |
          set -e
          test -f "content_studio/assets/${CLIENT}/config.json"
          echo "✅ Found config for ${CLIENT}"

      - name: Build metadata.json from client config
        env:
          CLIENT: ${{ github.event.inputs.client }}
          FPS_IN: ${{ github.event.inputs.fps }}
          SECS_IN: ${{ github.event.inputs.seconds }}
          AUDIO_URL: ${{ github.event.inputs.audio_url }}
        run: |
          set -e
          python - <<'PY'
          import json, os
          from pathlib import Path

          client = os.environ["CLIENT"]
          cfg = Path(f"content_studio/assets/{client}/config.json")
          meta_out = Path("tmp/metadata_client.json")
          meta_out.parent.mkdir(parents=True, exist_ok=True)

          data = json.loads(cfg.read_text(encoding="utf-8"))

          # pull from inputs if present
          fps = int(os.environ.get("FPS_IN") or data.get("fps", 30))
          # prefer config.json "scenes" seconds if available
          if "scenes" in data and all("duration" in s for s in data["scenes"]):
            seconds = [int(s["duration"]) for s in data["scenes"]]
          else:
            seconds = json.loads(os.environ.get("SECS_IN") or "[6,8,7]")

          images = []
          texts = []
          for s in data.get("scenes", []):
            images.append(f"content_studio/assets/{client}/images/{s['image']}")
            texts.append(s.get("text",""))

          meta = {
            "title": data.get("client_name", client),
            "subtitle": data.get("subtitle", "Sport Sync"),
            "fps": fps,
            "secs": seconds,
            "images": images,
            "texts": texts,
          }
          # voice/music optional passthrough
          if "voiceover" in data: meta["voiceover"] = data["voiceover"]
          if "music" in data: meta["music"] = data["music"]
          url = os.environ.get("AUDIO_URL","").strip()
          if url: meta["audio_url"] = url

          meta_out.write_text(json.dumps(meta, ensure_ascii=False, indent=2), encoding="utf-8")
          print("✅ Wrote", meta_out)
          PY

      - name: (Optional) Generate images via RunPod
        if: ${{ github.event.inputs.use_runpod == 'true' }}
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
          RUNPOD_ENDPOINT_ID: ${{ secrets.RUNPOD_ENDPOINT_ID }}
          CLIENT: ${{ github.event.inputs.client }}
        run: |
          set -e
          if [ -z "$RUNPOD_API_KEY" ] || [ -z "$RUNPOD_ENDPOINT_ID" ]; then
            echo "⚠️ RUNPOD_* secrets not set; skipping image generation."
            exit 0
          fi
          echo "🚀 (placeholder) call your RunPod script here to (re)generate client images"
          # مثال:
          # python tools/comfy_runsync_save_image.py \
          #   --workflow tools/workflows/flux1_text2img.json \
          #   --prompt "Sport Sync — cinematic teal tunnel" \
          #   --out "content_studio/assets/${CLIENT}/images/scene_1.png"

      - name: Render video (no/with audio)
        run: |
          python content_studio/ai_video/generate_final_video.py \
            --meta tmp/metadata_client.json \
            --out content_studio/ai_video/final_video.mp4

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: final_video
          path: content_studio/ai_video/final_video.mp4
